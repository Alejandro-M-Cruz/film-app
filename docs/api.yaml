openapi: 3.0.3
info:
  title: film-app
  description:
    Simple API for a film app that allows users to register, login, and CRUD films. Authentication is done using JWT. 
    All authenticated users can create and access films, but only the user that created a film can update or delete it.
  contact:
    email: alejandromatiascc@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:8000
tags:
  - name: auth
    description: JWT authentication
  - name: films
    description: Film CRUD
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Registers a user
      description: Registers a new user using a unique username and a password
      operationId: auth.register
      requestBody:
        $ref: '#/components/requestBodies/AuthRequest'
      responses:
        '201':
          description: User registered successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Conflict
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrors'
              example:
                message: Username is required (and 1 more error)
                errors:
                  username:
                    - Username is required
                  password:
                    - Password is required
        '500':
          $ref: '#/components/responses/InternalServerError'
      security: []

  /auth/login:
    post:
      tags:
        - auth
      summary: Logs in a user
      description:
        Finds a user by username, verifies the password matches and returns a JWT token that expires after 24 hours
      operationId: auth.login
      requestBody:
        $ref: '#/components/requestBodies/AuthRequest'
      responses:
        '200':
          description: User logged in successfully (returns JWT token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1MTYyMzkwMjJ9.7J1ZQ
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Wrong username or password
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrors'
              example:
                message: Username is required (and 1 more error)
                errors:
                  username:
                    - Username is required
                  password:
                    - Password is required
        '500':
          $ref: '#/components/responses/InternalServerError'
      security: []

  /films:
    get:
      tags:
        - films
      summary: Lists films
      description: Returns a paginated list of films filtered by title, genres and release date
      operationId: films.index
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: page_size
          schema:
            $ref: '#/components/schemas/PageSize'
        - in: query
          name: title
          schema:
            type: string
          description: Return films that contain the given title
        - in: query
          name: genres
          schema:
            type: string
            example: drama,thriller
          description:
            'Return films that have any of the given genres (comma separated). Options are: `action`, `adventure`,
            `comedy`, `drama`, `fantasy`, `horror`, `mystery`, `romance`, `thriller` and `western`'
        - in: query
          name: released_after
          schema:
            type: string
            format: date
          description: Return films that were released after the given date
        - in: query
          name: released_before
          schema:
            type: string
            format: date
          description: Return films that were released before the given date
      responses:
        '200':
          description: Paginated list of films and filters used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFilms'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jwt_auth: []
    post:
      tags:
        - films
      summary: Creates a film
      description: Creates a new film
      operationId: films.create
      requestBody:
        $ref: '#/components/requestBodies/CreateFilmRequest'
      responses:
        '201':
          description: Film created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Conflict (film already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Film already exists
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrors'
              example:
                message: Title is required
                errors:
                  title:
                    - Title is required
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jwt_auth: []
  /films/{id}:
    get:
      tags:
        - films
      summary: Shows a film
      description: Shows a film by id
      operationId: films.show
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Film details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilmDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jwt_auth: []
    patch:
      tags:
        - films
      summary: Updates a film
      description: Updates a film by id
      operationId: films.update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/UpdateFilmRequest'
      responses:
        '200':
          description: Film updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrors'
              example:
                message: Title must be at most 255 characters (and 1 more error)
                errors:
                  title:
                    - Title must be at most 255 characters
                  genre:
                    - Genre is not valid
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jwt_auth: []
    delete:
      tags:
        - films
      summary: Deletes a film
      description: Deletes a film by id
      operationId: films.delete
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Film deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jwt_auth: []

components:
  schemas:
    PaginatedFilms:
      type: object
      properties:
        films:
          type: array
          items:
            $ref: '#/components/schemas/Film'
        total:
          type: integer
          description: Total number of films that match the filters
          example: 1
        page:
          type: integer
          default: 1
        page_size:
          $ref: '#/components/schemas/PageSize'
        filters:
          $ref: '#/components/schemas/FilmFilters'
    FilmFilters:
      type: object
      properties:
        title:
          type: string
          example: "redemption"
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
          example:
            - drama
        released_after:
          type: string
          format: date
          example: 1990-01-01
        released_before:
          type: string
          format: date
          example: 2000-01-01
    PageSize:
      type: integer
      enum:
        - 10
        - 20
        - 50
      default: 10
    Film:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: The Shawshank Redemption
        director:
          type: string
          example: Frank Darabont
        release_date:
          type: string
          format: date
          example: 1994-09-23
        genre:
          $ref: '#/components/schemas/Genre'
        cast:
          type: array
          items:
            type: string
          example:
            - Tim Robbins
            - Morgan Freeman
            - Bob Gunton
        synopsis:
          type: string
          example:
            Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of 
            common decency.
        created_at:
          type: string
          format: date-time
          example: 2025-03-02T01:03:07.300Z
        updated_at:
          type: string
          format: date-time
          example: 2025-03-02T01:03:07.300Z
        user_id:
          type: integer
          format: int64
          example: 1
    Genre:
      type: string
      default: drama
      enum:
        - action
        - adventure
        - comedy
        - drama
        - fantasy
        - horror
        - mystery
        - romance
        - thriller
        - western
    FilmDetails:
      allOf:
        - $ref: '#/components/schemas/Film'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: test
    Error:
      type: object
      properties:
        message:
          type: string
    ValidationErrors:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            errors:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string

  requestBodies:
    AuthRequest:
      description: User that should be registered
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: test
              password:
                type: string
                example: password
            required:
              - username
              - password
    CreateFilmRequest:
      description: Film that should be created
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                example: 12 Angry Men
              director:
                type: string
                example: Sidney Lumet
              release_date:
                type: string
                format: date
                example: 1957-04-10
              genre:
                $ref: '#/components/schemas/Genre'
              cast:
                type: array
                items:
                  type: string
                example:
                  - Henry Fonda
                  - Lee J. Cobb
                  - Martin Balsam
              synopsis:
                type: string
                example:
                  A jury holdout attempts to prevent a miscarriage of justice by forcing his colleagues to reconsider 
                  the evidence.
            required:
              - title
              - director
              - release_date
              - genre
              - cast
              - synopsis

    UpdateFilmRequest:
      description: Fields that should be updated in the film
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                example: 12 Angry Men
              director:
                type: string
                example: Sidney Lumet
              release_date:
                type: string
                format: date
                example: 1957-04-10
              genre:
                $ref: '#/components/schemas/Genre'
              cast:
                type: array
                items:
                  type: string
                example:
                  - Henry Fonda
                  - Lee J. Cobb
                  - Martin Balsam
              synopsis:
                type: string
                example:
                  A jury holdout attempts to prevent a miscarriage of justice by forcing his colleagues to reconsider
                  the evidence.

    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Film'
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Bad Request
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Unauthorized
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Not Found
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Internal Server Error
  securitySchemes:
    jwt_auth:
      type: http
      scheme: bearer